var leven = require("levenshtein");
var book_i = require("DB_book");
var user_i = require("DB_user");
var DB_Interface = require("DB_Interface");
// var Promise = require('bluebird');
var sequelize = DB_Interface.getServer;

/**
* Given a query string this will find books and users in the database that share a similar attribute with the query
* @param query_ the original query the user searches for
* @param function_ a function that passes two arrays consisting of the results (books and users).
*/
exports.search = exports.searchHandler = function searchHandler(query_, function_)
{
	queryUpper_=query_.toUpperCase();
	var splitQuery = queryUpper_.replace(/\W/g, ' ').split(" "); //Tokenize the query based off spaces, 
	var promisesArB = [];
	var promisesArU = [];
	for(var i = 0; i < splitQuery.length; i++){
		var bookresults = sequelize.query(
			"SELECT * FROM book WHERE isbn10 = \'" +splitQuery[i]+ "\' OR isbn13 = \'" +splitQuery[i]+ "\' OR UPPER(title) LIKE \'%" +splitQuery[i]+ "%\' OR UPPER(author) LIKE \'%" +splitQuery[i]+ "%\';", book_i.booktable
		 );
		var userresults = sequelize.query(
			"SELECT * FROM users WHERE UPPER(username) LIKE \'%" +splitQuery[i]+ "%\';", user_i.userstable
		);
		promisesArB.push(bookresults);
		promisesArU.push(userresults);
	}
	var BookResults = [];
	var UserResults = [];
	Promise.all(promisesArB).then(function(records){
		for(i = 0; i < records[0].length; i++){
			BookResults.push(calcProbBook(query_, records[0][i].dataValues));
		}
		Promise.all(promisesArU).then(function(records2){//Now we handle the possible users.
			for(i = 0; i < records2[0].length; i++){
				UserResults.push(calcProbUser(query_, records2[0][i].dataValues));
			}
			function_(BookResults, UserResults);
		});
	});

}

/**
* @param query_ the raw query, exactly as entered by the user.
* @param result_ the user record in JSON format,  the object will be returned with an additional parameter, probability.
*/
function calcProbUser(query_, result_)
{
	//Some whitespace cleanup
result_.username = result_.username.trim();	//remove trailing whitespace
result_.firstname = result_.firstname.trim();
result_.lastname = result_.lastname.trim();
result_.email = result_.email.trim();
result_.institution = result_.institution.trim();

var queryTokens = query_.replace(/\W/g, ' ').split(" ");
var p = 0; var maxp = 0;
for(var i = 0; i < queryTokens.length; i++){
	p = compProb(queryTokens[i], result_.username);
	maxp = Math.max(maxp, p);
}
result_.probability = maxp;
return result_;
}

/**
* Calculates the probability a given book record is the desired result for a provided query.
* @param query_ the raw query, exactly as entered by the user
* @param result_ the book record in JSON format, the object will be returned with an additional parameter, probability.
*/
function calcProbBook(query_, result_)
{	
	//Some whitespace cleanup
result_.title = result_.title.trim();//trailing whitespace removed
result_.author = result_.author.trim();//trailing whitespace removed
	
var queryTokens = query_.replace(/\W/g, ' ').split(" ");
var titleTokens = result_.title.replace(/\W/g, ' ').split(" "); //remove trailing whitespace, replace nonalphanumerics and split based off whitespace.
var authorTokens = result_.author.replace(/\W/g, ' ').split(" "); //remove trailing whitespace, replace nonalphanumerics and split based off whitespace.

if(result_.isbn13 === query_ || result_.isbn10 === query_){ //Exact match by isbn so it's the book
	result_.probability = 1.0;
	return result_;
}

var p = 0; var maxp = 0;
for(var i = 0; i < queryTokens.length; i++){

	for(var j = 0; j < titleTokens.length; j++){
		p = compProb(titleTokens[j],queryTokens[i]);
		maxp = Math.max(p, maxp);
	}
	for(j = 0; j < authorTokens.length; j++){
		p = compProb(authorTokens[j], queryTokens[i]);
		maxp = Math.max(p, maxp);
	}
}
result_.probability = maxp;

return result_;
}

/**
* Computes the probability two strings are the desired result.
* @param a String
* @param b String
*/
function compProb(a,b)
{
	a = a.toUpperCase();
	b = b.toUpperCase();
	var prob = 1.0 - (leven.getEditDistance(a,b))/(Math.max(a.length,b.length));
	return prob;
}