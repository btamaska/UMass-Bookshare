var Sequelize = require("sequelize");
var exports = module.exports = {};

/*
If you're getting an error try ensuring all the information below is correct for YOUR local DB. This will eventually be exported to an exernal file.
*/
var DB_ = "";
var user_ = "";
var pass_ = "";

var sequelize = new Sequelize(DB_, user_, pass_, {
    host: "localhost",
    dialect: "postgres",
    pool:{
        max: 5,
        min: 0,
        idle: 1000
    }
});

exports.getServer = sequelize;

var user_i = require("DB_user");
var book_i = require("DB_book");




// Legacy code that I don't want to remove just yet.
    // .error(function(){
    //  console.log("something went wrong");
    // })

// var added;
//  added = found.spread(function(record, created)
//      {
//          console.log(created);
//          if (!created) { added = false;}
//          console.log(added + "!");
//      });
    // console.log(added + " ?");       
    // return added;

// }
// BookTest.sync({force: true}).then(function () { //Change sync({force: true}) to sync() to avoid dropping table on updates
//  return BookTest.create({
//      testString: "Brave New World",
//      testInt: 1932
//  });
// });


/**
 * Adds a user to the DB and passes the information to a supplied function. If the username already exists in the DB no new row will be added.
 * @param {String} username_ 
 * @param {String} password_ The unsalted + hashed password.
 * @param {String} age_ 
 * @param {String} firstName_
 * @param {String} lastName_
 * @param {String} sex_ m,f,o are the 3 allowed options
 * @param {String} email_
 * @param {String} phone_
 * @param {String} institution_
 * @param {String} function_ When the DB returns the result of adding a row this function is run with the result as parameters.
 */
exports.addUser = function addUser_(username_, pass_, age_, firstN_, lastN_, sex_, email_, phone_, institution_, function_)
{
	user_i.addUser(username_, pass_, age_, firstN_, lastN_, sex_, email_, phone_, institution_, function_);
}

/**
* Returns user information based off their username. All field, but the password, are returned in an array and passed through the supplied function.
* @param username_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of the user's values or null if not found
*/
exports.getUser = function getUser_(username_, function_)
{
	user_i.getUser(username_,function_);
}

/**
* Insecure method of verifying user information at the moment, a plaintext password is passed and checked against the DB's field.
* This is not permenant but you should refactor your code so all verification can be done be an external module anyway.
*/
exports.verifyUser = function verifyUser_(username_, pass_, function_)
{
	user_i.verifyUser(username_, pass_, function_);
}

/**
* Adds a book to the DB and passes the information to a supplied function. If the isbn13 already exists in the DB no new row will be added.
* @param title_ 
* @param author_
* @param isbn10_
* @param isbn13_
* @param publicationDate_
* @param version_
* @param cover_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return record[0].options.isNewRecord if you need just a boolean
*/
exports.addBook = function addBook_(title_, author_, isbn10_, isbn13_, publicationDate_, version_, cover_, function_)
{
    book_i.addBook(title_, author_, isbn10_, isbn13_, publicationDate_, version_, cover_, function_);
}

/**
* Search for results that partially match the specified fields. THIS FUNCTION IS NONFUNCTIONAL AT THE MOMENT
* @param title_ Book title to search for
* @param author_ Book author to search for
* @param version_ Version of the book to search for
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of possible books, the results will need to be refined to get proper ordering.
*/
exports.searchBook = function searchBook_(title_, author_, version_, function_)
{
    book_i.searchBook(title_, author_, version_, function_);
}


/**
* Retrieves a book from the DB based off it's ISBN13 name.
* @param isbn13_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of the book's values or null if not found
*/
exports.getBook = function getBook_(isbn13_, function_)
{
    book_i.getBook(isbn13_, function_);
}