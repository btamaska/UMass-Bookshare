var Sequelize = require("sequelize");
var exports = module.exports = {};
var DB_Interface = require("DB_Interface");
var sequelize = DB_Interface.getServer;

/*
    Define the "model" for the book table.
    This is the structure Sequelize will use when accessing the DB.
*/
var BookTable = sequelize.define("Book", {
    title: Sequelize.STRING(255),
    author: Sequelize.STRING(60),
    isbn10: Sequelize.STRING(10),
    isbn13: {
        type: Sequelize.STRING(13),
        primaryKey: true
    },
    publicationdate: Sequelize.DATE,
    version: Sequelize.INTEGER,
    cover: Sequelize.BLOB,
    },

    {
    timestamps: false,
    freezeTableName: true,
    tableName: "book"
});

/**
* Retrieves a book from the DB based off it's ISBN13 name.
* @param isbn13_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of the book's values or null if not found
*/
exports.getBookbyISBN13 = function getBook(isbn13_, function_) 
{
	var found = BookTable.findOne({
		where: {isbn13: isbn13_}
	});
	found.then(function(record){
		var recordValues = null;
		if(record != null)
		{
			userValues = [record.dataValues.title.trim(),
							record.dataValues.author.trim(),
							record.dataValues.isbn10.trim(),
							record.dataValues.isbn13.trim(),
							record.dataValues.publicationDate.trim(),
							record.dataValues.version.trim(),
							record.dataValues.cover.trim()]
		}
		else //Need to retrieve from the online DB.
		{
			console.log("Retrieve from online");
		}
		function_(recordValues);
	}

	);
}

/**
* Search for results that partially match the specified fields.
* @param title_ Book title to search for
* @param author_ Book author to search for
* @param version_ Version of the book to search for
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of possible books, the results will need to be refined to get proper ordering.
*/
exports.searchBook = null/* function searchBook(title_, author_, version_, function_)
{
	if(typeof title_ == "string" && title_ != "") //title should not be blank
	{
		var found = BookTable.findAll({
			where: { 
				title: { 
					$iLike: "%" + title_ + "%"
				},
				$and: [
					author: {
						$iLike: "%" + author_ + "%"
					}
				]
			},
			order: "version DESC"
		});
		found.then(function(record){
			var recordValues = null;
			if(record != null)
			{
				function_(record);
			}
		});
	}
}
*/

/**
* Adds a book to the DB and passes the information to a supplied function. If the isbn13 already exists in the DB no new row will be added.
* @param title_ 
* @param author_
* @param isbn10_
* @param isbn13_
* @param publicationDate_
* @param version_
* @param cover_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return record[0].options.isNewRecord if you need just a boolean
*/
exports.addBook = function addBook(title_, author_, isbn10_, isbn13_, publicationDate_, version_, cover_, function_)
{
	console.log(typeof function_ + "ajsdfajksdfnasdlkjfasjdkl");
	var found = BookTable.findOrCreate({ where: {isbn13: isbn13_},
		defaults: {
			title: title_,
			author: author_,
			isbn10: isbn10_,
			isbn13: isbn13_,
			publicationdate: publicationDate_,
			version: version_,
			cover: cover_
		}
	});
	found.then(function(record){
		console.log(typeof function_ + "!!");
		function_(record);
	});
}