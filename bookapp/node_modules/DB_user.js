var Sequelize = require("sequelize");
var exports = module.exports = {};

var DB_Interface = require("DB_Interface");
var sequelize = DB_Interface.getServer; //get the server connection.

/*
    Define the "model" for the "user" table.
    This is the structure Sequelize will use when accessing the DB.
*/
var UsersTable = sequelize.define("Users",{
    username:{
        type: Sequelize.STRING(20),
        primaryKey: true,
        validate:{
            isAlphanumeric: true
        }
    },
    
    password: Sequelize.STRING(128),
    
    age: {
        type: Sequelize.INTEGER,
        validate:{
            isInt: true
        }
    },
    
    firstname: Sequelize.STRING(30),
    
    lastname: Sequelize.STRING(30),
    
    sex: { //Three options, male, female, other.
        type: Sequelize.STRING(1),
        validate:{
            is: /^m$|^f$|^o$/i //Should be either a "m", "f", or "o", case insensitive
        }
    },
    
    email: {
        type: Sequelize.STRING(50),
        validate:{
            isEmail: true
        }
    },
    
    phone: {
        type: Sequelize.STRING(12),
        validate:{
            isNumeric: true
        }
    },
    
    institution: Sequelize.STRING(60),
    
    },
    {
    timestamps: false,
    freezeTableName: true,
    tableName: "users"
});
exports.table = UsersTable;

/**
 * Adds a user to the DB and passes the information to a supplied function. If the username already exists in the DB no new row will be added.
 * @param {String} username_ 
 * @param {String} password_ The unsalted + hashed password.
 * @param {String} age_ 
 * @param {String} firstName_
 * @param {String} lastName_
 * @param {String} sex_ m,f,o are the 3 allowed options
 * @param {String} email_
 * @param {String} phone_
 * @param {String} institution_
 * @param {String} function_ When the DB returns the result of adding a row this function is run with the result as parameters.
 */ //TODO: success and error handling
exports.addUser =  function addUser(username_, password_, age_, firstName_, lastName_, sex_, email_, phone_,institution_, function_)
{
	var found = UsersTable.findOrCreate({ where: {username: username_},
		/*
			Details to be added if no row with the same username is found.
		*/
		defaults:{
			username: username_,
			password: password_,
			age: age_,
			firstname: firstName_,
			lastname: lastName_,
			sex: sex_,
			email: email_,
			phone: phone_,
			institution: institution_
		}
	});
	found.then(function(record){
		//record[0].options.isNewRecord if you need the boolean.
		function_(record); //created is at record[1] so this passes everything.
	});
}

/**
* Returns user information based off their username. All field, but the password, are returned in an array and passed through the supplied function.
* @param username_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of the user's values or null if not found
*/
exports.getUser = function getUser(username_, function_)
{
	var found = UsersTable.findOne({
		where: {username: username_}
	});
	found.then(function(record){
		var userValues = null;
		if(record != null)
		{
			//Remove white space used to pad rows to length.
			userValues = {
                username : record.dataValues.username.trim(),
                password : record.dataValues.password.trim(),
                age : record.dataValues.age,
                firstname : record.dataValues.firstname.trim(),
                lastname : record.dataValues.lastname.trim(),
                sex : record.dataValues.sex,
                email : record.dataValues.email.trim(),
                phone : record.dataValues.phone.trim(),
                institution : record.dataValues.institution.trim()
            } ;
		}
		function_(userValues);
	});
}

/**
* Insecure method of verifying user information at the moment, a plaintext password is passed and checked against the DB's field.
*/
exports.verifyUser = function verifyUser(username_, pass_, function_)
{
    var found = UsersTable.findOne({
        where: {username: username_} 
    });
    found.then(function(record){
        var userValues = false;
        if(record != null)
        {
            userValues = (pass_ === record.dataValues.password.trim());
        }
        function_(userValues);
    })
}

