var Sequelize = require("sequelize");
var exports = module.exports = {};
var DB_Interface = require("DB_Interface");
var sequelize = DB_Interface.getServer;

var userInterface = require("DB_user"); //These might be used to manually add constraints since rating is dependant on user
var userTable = userInterface.table;

var RatingTable = exports.ratingtable = sequelize.define("Rating", {
	rateduser : {
		type : Sequelize.STRING(20),
		primaryKey: true
	},
	ratinguser : {
		type : Sequelize.STRING(20),
		primaryKey: true
	},
	rating : {
		type : 	Sequelize.INTEGER,
		validate:{
            isInt: true,
			min : 1,
			max : 5
        }
	}
},
	{
	    timestamps: false,
	    freezeTableName: true,
    	tableName: "rating"
});

//ListTable.belongsTo(userTable, { as: "rateduser", foreignKey: "username" });
//ListTable.belongsTo(userTable, { as: "ratinguser", foreignKey: "username" });
	
exports.table = RatingTable;


/**
* Upserts a rating for a given user from a given user, rating is enfored to be between 1-5 inclusive
* @param rateduser_ user being rated
* @param ratinguser_ user that is rating rateduser_
* @param rating_ an int between 1-5
* @param function_ results are passed through this function when it completes.
*/
//http://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql
exports.rateUser = function rateUser(rateduser_, ratinguser_, rating_, function_)
{
	if( rateduser_ === ratinguser_){
		function_("A user cannot rate themselves");
	}
	/*
		UPDATE rating
		SET rating = 'rating_'
		WHERE rateduser = 'rateduser_', ratinguser = 'ratinguser';
		INSERT INTO rating (rateduser, ratinguser, rating)
			SELECT 'rateduser_', 'ratinguser_', rating
			WHERE NOT EXIST (SELECT 1 FROM rating WHERE rateduser = 'rateduser', ratinguser = 'ratinguser');
	*/
	var found = sequelize.query(
								"UPDATE rating SET rating = \'" + rating_ + "\' WHERE rateduser = \'" + rateduser_ + "\' AND ratinguser = \'" + ratinguser_ + "\'; INSERT INTO rating (rateduser, ratinguser, rating) SELECT \'" + rateduser_ + "\', \'" + ratinguser_ + "\', " + rating_ + " WHERE NOT EXISTS (SELECT 1 FROM rating WHERE rateduser = \'" + rateduser_ + "\' AND ratinguser = \'" + ratinguser_ +"\');"
	,RatingTable);
	found.then(function(record){
		function_(record);
	});
}

exports.getAVGUserRating = function getAVGUserRating(rateduser_, function_)
{
	var query = "SELECT AVG(rating) FROM rating WHERE rateduser = \'" + rateduser_ + "\';"
	var found = sequelize.query(query, RatingTable);
	found.then(function(record) {
		function_(record[0].dataValues.avg);
	});
}

exports.getRating = function getRating_(rateduser_, ratinguser_, function_)
{
	var found = RatingTable.findOne({
        where: {rateduser: rateduser_, ratinguser: ratinguser_}
    });
	found.then(function(record){
		function_(record.dataValues.rating);
	});
}